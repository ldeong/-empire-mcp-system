#!/usr/bin/env node

/**
 * MCP Ecosystem Setup Script
 * Helps users configure their environment for the MCP ecosystem
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function setupEnvironment() {
  console.log('🚀 SINA Empire MCP Ecosystem Setup');
  console.log('=====================================\n');

  // Check if .env already exists
  const envPath = path.join(__dirname, '..', '.env');
  if (fs.existsSync(envPath)) {
    const overwrite = await askQuestion('⚠️  .env file already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
  }

  console.log('Please provide the following configuration values:');
  console.log('(Press Enter to skip optional values)\n');

  // Required configurations
  const cloudflareUrl = await askQuestion('Cloudflare Worker URL (required): ');
  const githubToken = await askQuestion('GitHub Personal Access Token (required): ');
  const asanaToken = await askQuestion('Asana Personal Access Token (required): ');
  const webhookUrl = await askQuestion('SINA Webhook URL (required): ');

  // Optional configurations
  const openaiKey = await askQuestion('OpenAI API Key (optional): ');
  const anthropicKey = await askQuestion('Anthropic API Key (optional): ');
  const port = await askQuestion('Server Port (default: 3000): ') || '3000';

  // Create .env content
  let envContent = `# MCP Ecosystem Configuration
# Generated by setup script on ${new Date().toISOString()}

`;

  if (cloudflareUrl) {
    envContent += `CLOUDFLARE_WORKER_URL=${cloudflareUrl}\n`;
  }

  if (githubToken) {
    envContent += `GITHUB_TOKEN=${githubToken}\n`;
  }

  if (asanaToken) {
    envContent += `ASANA_TOKEN=${asanaToken}\n`;
  }

  if (webhookUrl) {
    envContent += `SINA_WEBHOOK_URL=${webhookUrl}\n`;
  }

  if (openaiKey) {
    envContent += `OPENAI_API_KEY=${openaiKey}\n`;
  }

  if (anthropicKey) {
    envContent += `ANTHROPIC_API_KEY=${anthropicKey}\n`;
  }

  envContent += `
# Server Configuration
PORT=${port}
NODE_ENV=development

# Logging Configuration
LOG_LEVEL=info
LOG_FILE=mcp-system.log

# Security Configuration
JWT_SECRET=${require('crypto').randomBytes(32).toString('hex')}
API_RATE_LIMIT=100
`;

  // Write .env file
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n✅ .env file created successfully!');
  } catch (error) {
    console.error('\n❌ Error creating .env file:', error.message);
    rl.close();
    return;
  }

  // Check for missing required values
  const missing = [];
  if (!cloudflareUrl) missing.push('CLOUDFLARE_WORKER_URL');
  if (!githubToken) missing.push('GITHUB_TOKEN');
  if (!asanaToken) missing.push('ASANA_TOKEN');
  if (!webhookUrl) missing.push('SINA_WEBHOOK_URL');

  if (missing.length > 0) {
    console.log('\n⚠️  Warning: The following required environment variables are missing:');
    missing.forEach(key => console.log(`   - ${key}`));
    console.log('Please edit the .env file and add these values before running the server.');
  } else {
    console.log('\n🎉 Setup complete! All required configuration values are set.');
    console.log('You can now run the MCP ecosystem with: npm start');
  }

  // Offer to install dependencies
  const installDeps = await askQuestion('\nInstall dependencies now? (Y/n): ');
  if (installDeps.toLowerCase() !== 'n' && installDeps.toLowerCase() !== 'no') {
    console.log('\n📦 Installing dependencies...');
    const { spawn } = require('child_process');
    const npm = spawn('npm', ['install'], { stdio: 'inherit', cwd: path.join(__dirname, '..') });

    npm.on('close', (code) => {
      if (code === 0) {
        console.log('\n✅ Dependencies installed successfully!');
        console.log('🚀 Ready to start the MCP ecosystem!');
      } else {
        console.log('\n❌ Error installing dependencies. Please run "npm install" manually.');
      }
      rl.close();
    });
  } else {
    console.log('\n📝 Remember to run "npm install" before starting the server.');
    rl.close();
  }
}

// Handle script interruption
process.on('SIGINT', () => {
  console.log('\n\nSetup cancelled by user.');
  rl.close();
  process.exit(0);
});

// Run setup
setupEnvironment().catch((error) => {
  console.error('Setup failed:', error);
  rl.close();
  process.exit(1);
});